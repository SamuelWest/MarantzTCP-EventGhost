# -*- coding: utf-8 -*-
#
# plugins/MarantzTCP/__init__.py
#
# This file is a plugin for EventGhost designed to control supported Marantz (and probably Denon) AV Receivers via TCP/IP.
# Copyright (C) 2012 Sam West <samwest.spam@gmail.com>
#
# Changelog (in reverse chronological order):
# -------------------------------------------
# 0.0.1  by SamWest 2012-12-07 19:00 UTC+10
#      - initial version 
#===============================================================================

import eg, socket, sys, telnetlib, threading
from telnetlib import Telnet

eg.RegisterPlugin(
    name = "Marantz TCP",
    author = "Sam West",
    version = "0.0.1",
    kind = "external",
    description = "Controls Marantz Receivers over a TCP/IP connection.  Currently provides convenience methods for setting absolute volume, and sending arbitrary text commands."+
                  "See included MarantzVolumeSync.xml for example usage. " 
                  "<p>See <a href=http://us.marantz.com/DocumentMaster/US/Marantz_AV_SR_NR_PROTOCOL_V01.xls>here</a> for a full list of supported commands. "+
                  "<p>Supported Marantz models include: AV7005, SR7005, SR6006, SR6005, SR5006, NR1602 (and probably others with an ethernet connection). "+
                  "<p>Might also support (untested) Denon models: AVR-3808, AVC-3808, command list <a href=http://usa.denon.com/US/Downloads/Pages/InstructionManual.aspx?FileName=DocumentMaster/US/AVR-3808CISerialProtocol_Ver5.2.0a.pdf>here</a>.",
    createMacrosOnAdd=False
)

class SetVolumeAbsolute(eg.ActionBase):
    name='Set absolute volume'
    description='Sets the absolute volume'

    def __call__(self, volume):
        return self.plugin.setVolumeAbsolute(volume)
        
    def GetLabel(self, volume):
        return "Set Absolute Volume to %d" % volume
        
    def Configure(self, volume=25):
        panel = eg.ConfigPanel(self)
        
        valueCtrl = eg.SmartSpinIntCtrl(panel, -1, 0, min=0)
        panel.AddLine("Set absolute volume to", valueCtrl)
        while panel.Affirmed():
            panel.SetResult(valueCtrl.GetValue())
            
''' Sends a raw text command to the receiver.  See http://us.marantz.com/DocumentMaster/US/Marantz_AV_SR_NR_PROTOCOL_V01.xls for details '''
class SendCommandText(eg.ActionBase):
    name='Send Text Command'
    description='Sets the absolute volume'

    def __call__(self, cmd):
        print 'Sending command: '+cmd
        return self.plugin.sendCommand(str(cmd))
        
    def GetLabel(self, cmd):
        return "Send Command '%s'" % cmd
        
    def Configure(self, volume=25):
        panel = eg.ConfigPanel(self)
        
        cmdCtrl = wx.TextCtrl(panel,-1, '')
        desc = wx.StaticText(panel,-1, 'See http://us.marantz.com/DocumentMaster/US/Marantz_AV_SR_NR_PROTOCOL_V01.xls for a list of commands')
        
        panel.AddLine(desc)
        panel.AddLine("Send Command: ", cmdCtrl)
        while panel.Affirmed():
            panel.SetResult(cmdCtrl.GetValue())
            
            
''' The EventGhost plugin class. '''
class MarantzTCPPlugin(eg.PluginBase):
   
    telnet=None
    reader=None
    host=None
    port=None
    timeout=None
    maxDb=12
    
    def __init__(self):
        self.AddAction(SetVolumeAbsolute)
        self.AddAction(SendCommandText)
        
    def __start__(self, host, port, timeout, maxDb):
        self.host=host
        self.port=port
        self.timeout=timeout
        self.maxDb=maxDb
        print "MarantzTCPPlugin started"

    def __stop__(self):
        print "MarantzTCPPlugin stopped."

    def __close__(self):
        self.closeTelnetSession()
        print "MarantzTCPPlugin closed."
        
    ''' Lazily create a new SocketSender '''
    def getTelnet(self):
        if (self.telnet == None):
            self.telnet = Telnet(self.host, self.port, self.timeout)
            self.reader = ReadClass(self)
            self.reader.setTelnet(self.telnet)
            self.reader.start()
        return self.telnet
    
    def closeTelnetSession(self):
        if (self.telnet!=None):
            self.telnet.close()
            self.telnet=None
           
    def roundTo(self, n, precision):
        correction = 0.5 if n >= 0 else -0.5
        return int(n/precision+correction)*precision
    
    ''' Rounds n to nearest 0.5 '''
    def roundToHalf(self, n):
        return self.roundTo(n, 0.5)            
        
    '''Converts a percentage volume (0,100) to a MV code to set the receiver to that volume'''
    def volumePercentToMV(self, perc):
        if (perc < 0.0 or perc > 100.0): 
            print 'perc must be a float in range [0,100]'
            return None
    
        maxMV = self.maxDb + 80
        mvNum = self.roundToHalf((perc/100.0)*maxMV)
        sys.stdout.write('Setting receiver volume to {0}dB '.format(mvNum-80))
        
        #Build the correct MVXX or MVXXX string to set the volume.
        if (mvNum<10):
            cmd = 'MV' + ('%2.1f' % mvNum)
            cmd=cmd.replace('MV','MV0')
            cmd=cmd.replace('.', '')
        else:
            cmd = 'MV' + str(mvNum).replace('.5', '5').replace('.', '')
            
        if (cmd.endswith('0')): cmd=cmd[0:4]
        
        if (len(cmd) < 4): cmd = cmd + '0'
        return cmd
   
    def sendCommand(self, cmd):
        try:
            self.getTelnet().write(cmd+'\r')
        except socket.error, e:
            eg.PrintError("Error sending data: %s" % e)
            self.closeTelnetSession()
    
    def setVolumeAbsolute(self, percentage):
        cmd = self.volumePercentToMV(percentage)
        print '('+str(percentage)+"%), command="+cmd
        self.sendCommand(cmd)
        
    def Configure(self, host="192.168.1.10", rport=23, timeout=2, maxDb=12):
        text = self.text
        panel = eg.ConfigPanel()
        panel.GetParent().GetParent().SetIcon(self.info.icon.GetWxIcon())
        
        hostCtrl = wx.TextCtrl(panel,-1, host)
        rportCtrl = eg.SpinIntCtrl(panel, -1, rport, max=65535)
        timeoutCtrl = eg.SpinIntCtrl(panel, -1, timeout, min=1, max=10)
        maxDbCtrl = eg.SpinIntCtrl(panel, -1, maxDb, min=-80, max=12)
  
        panel.AddLine("Marantz Receiver IP Address:", hostCtrl)
        panel.AddLine("Marantz Receiver TCP Port:  ", rportCtrl)        
        panel.AddLine("Send Timeout (s):           ", timeoutCtrl)
        panel.AddLine("Max Allowed Volume (dB):    ", maxDbCtrl)
        
        while panel.Affirmed():
            panel.SetResult(
                hostCtrl.GetValue(),
                rportCtrl.GetValue(),  
                timeoutCtrl.GetValue(),
                maxDbCtrl.GetValue()
            )
        
''' A class that just listens for incoming lines from the telnet client, and creates events from this text.
    Event generation is pretty basic, and could be easily improved to parse and add payloads etc. '''        
class ReadClass(threading.Thread):
    stop = 0
    telnet = None
    plugin = None
    
    def __init__(self, marantzTCPPlugin):
        super(ReadClass, self).__init__()
        self.stop=0
        self.plugin=marantzTCPPlugin
    
    def setTelnet(self, telnet):
        self.telnet = telnet
        
    def stop(self):
        self.stop=1
    
    def run(self):
        while(self.stop==0):
            try:
                response = self.telnet.read_until('\r')
                self.plugin.TriggerEvent(response)
            except socket.error, e:
                eg.PrintError("Error receiving data: %s" % e)
                return
            except:
                e = sys.exc_info()[0]
                eg.PrintError("Error in read thread: %s" % e) 
                return
            

